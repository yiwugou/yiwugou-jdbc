
package com.yiwugou.jdbc.core.db;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

import javax.sql.DataSource;

import com.yiwugou.jdbc.core.adapter.AbstractConnectionAdapter;
import com.yiwugou.jdbc.core.util.AssertUtils;

/**
 * 
 * MasterSlaveConnection
 * 
 * @author zhanxiaoyong@yiwugou.com
 *
 * @since 2018年5月8日 下午3:20:19
 */
public final class MasterSlaveConnection extends AbstractConnectionAdapter {

    private final MasterSlaveDataSource masterSlaveDataSource;

    public MasterSlaveDataSource getMasterSlaveDataSource() {
        return this.masterSlaveDataSource;
    }

    private Connection connection = new EmptyConnection();

    public MasterSlaveConnection(MasterSlaveDataSource masterSlaveDataSource) {
        this.masterSlaveDataSource = masterSlaveDataSource;
    }

    public final Connection getConnection(final DataSource dataSource) throws SQLException {
        AssertUtils.notNull(dataSource, String.format("Missing the data source name: '%s'", dataSource));
        this.connection = dataSource.getConnection();
        replayMethodsInvocation(connection);
        return this.connection;
    }

    @Override
    public DatabaseMetaData getMetaData() throws SQLException {
        return getConnection(masterSlaveDataSource.getMasterSlaveRule().getMasterDataSource()).getMetaData();
    }

    @Override
    public Statement createStatement() {
        return new MasterSlaveStatement(this);
    }

    @Override
    public Statement createStatement(final int resultSetType, final int resultSetConcurrency) {
        return new MasterSlaveStatement(this, resultSetType, resultSetConcurrency);
    }

    @Override
    public Statement createStatement(final int resultSetType, final int resultSetConcurrency,
            final int resultSetHoldability) {
        return new MasterSlaveStatement(this, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public PreparedStatement prepareStatement(final String sql) throws SQLException {
        return new MasterSlavePreparedStatement(this, sql);
    }

    @Override
    public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency)
            throws SQLException {
        return new MasterSlavePreparedStatement(this, sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency,
            final int resultSetHoldability) throws SQLException {
        return new MasterSlavePreparedStatement(this, sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys) throws SQLException {
        return new MasterSlavePreparedStatement(this, sql, autoGeneratedKeys);
    }

    @Override
    public PreparedStatement prepareStatement(final String sql, final int[] columnIndexes) throws SQLException {
        return new MasterSlavePreparedStatement(this, sql, columnIndexes);
    }

    @Override
    public PreparedStatement prepareStatement(final String sql, final String[] columnNames) throws SQLException {
        return new MasterSlavePreparedStatement(this, sql, columnNames);
    }

    @Override
    protected Connection getConnection() {
        return this.connection;
    }

}
